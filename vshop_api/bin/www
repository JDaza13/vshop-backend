#!/usr/bin/env node

/*  Determine env for the app */
const envs = require('../enviroments/envs');
const envObjs = envs.getEnvs();

/**
 * Set default port and host for the app
 */
var port = '8080';
var host = "localhost";

/**
 * if env is provided, update port and host
 */
if(getEnv()){

  port = normalizePort(getEnv().env.port);
  host = getEnv().env.host;
  
  envs.setSelEnv(getEnv());
}

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vshop-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host, function() {
  console.log('Node.js server started on: ' + host + ':' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//this method will try to get the env
//otherwhise it will return null
function getEnv(){

  var envKey = 'env=';
  var envResult = [];
  
  process.argv.forEach(function (val, index) {
    if(val.indexOf(envKey) >= 0){
      envResult = envObjs.filter(function(e){
        if(e.name === val.split('=')[1]){
          return e;
        }
        return null;
      });
    }
  });

  return envResult.length > 0 ? envResult[0] : null;
}
